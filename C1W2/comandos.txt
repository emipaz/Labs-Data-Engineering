aws rds describe-db-instances --db-instance-identifier de-c1w2-rds --output text --query "DBInstances[].Endpoint.Address"

de-c1w2-rds.c5qcyyoaqfsd.us-east-1.rds.amazonaws.com


mysql --host=de-c1w2-rds.c5qcyyoaqfsd.us-east-1.rds.amazonaws.com --user=admin --password=adminpwrd --port=3306


mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 30
Server version: 8.0.40 Source distribution

Copyright (c) 2000, 2024, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> use classicmodels;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+-------------------------+
| Tables_in_classicmodels |
+-------------------------+
| customers               |
| employees               |
| offices                 |
| orderdetails            |
| orders                  |
| payments                |
| productlines            |
| products                |
+-------------------------+
8 rows in set (0.01 sec)

mysql> exit;
Bye

source scripts/setup.sh

upload: terraform/assets/glue_job.py to s3://de-c1w2-730335457346-us-east-1-scripts/glue_job.py
Glue script has been set in the bucket
Defined Terraform variables


cd terraform
terraform init

Initializing the backend...

Successfully configured the backend "local"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.94.1...
- Installed hashicorp/aws v5.94.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


terraform plan

data.aws_subnet.public_a: Reading...
data.aws_vpc.main: Reading...
data.aws_iam_policy_document.glue_access_policy: Reading...
data.aws_security_group.db_sg: Reading...
data.aws_iam_policy_document.glue_base_policy: Reading...
data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Read complete after 0s [id=730335457346]
data.aws_iam_policy_document.glue_base_policy: Read complete after 0s [id=3940084333]
data.aws_iam_policy_document.glue_access_policy: Read complete after 0s [id=2526717434]
data.aws_subnet.public_a: Read complete after 1s [id=subnet-0c94c28e50220eac3]
data.aws_security_group.db_sg: Read complete after 1s [id=sg-04b9a2a21fd452b17]
data.aws_vpc.main: Read complete after 1s [id=vpc-06822aca78995ca9c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_glue_catalog_database.analytics_database will be created
  + resource "aws_glue_catalog_database" "analytics_database" {
      + arn          = (known after apply)
      + catalog_id   = (known after apply)
      + description  = "Database for performing analytics on OLTP data"
      + id           = (known after apply)
      + location_uri = (known after apply)
      + name         = "de-c1w2-analytics-db"
      + tags_all     = (known after apply)

      + create_table_default_permission (known after apply)
    }

  # aws_glue_connection.rds_connection will be created
  + resource "aws_glue_connection" "rds_connection" {
      + arn                   = (known after apply)
      + catalog_id            = (known after apply)
      + connection_properties = (sensitive value)
      + connection_type       = "JDBC"
      + id                    = (known after apply)
      + name                  = "de-c1w2-rds-connection"
      + tags_all              = (known after apply)

      + physical_connection_requirements {
          + availability_zone      = "us-east-1a"
          + security_group_id_list = [
              + "sg-04b9a2a21fd452b17",
            ]
          + subnet_id              = "subnet-0c94c28e50220eac3"
        }
    }

  # aws_glue_crawler.s3_crawler will be created
  + resource "aws_glue_crawler" "s3_crawler" {
      + arn           = (known after apply)
      + database_name = "de-c1w2-analytics-db"
      + id            = (known after apply)
      + name          = "de-c1w2-analytics-db-crawler"
      + role          = (known after apply)
      + tags_all      = (known after apply)

      + recrawl_policy {
          + recrawl_behavior = "CRAWL_NEW_FOLDERS_ONLY"
        }

      + s3_target {
          + path = "s3://de-c1w2-730335457346-us-east-1-datalake/gold"
        }

      + schema_change_policy {
          + delete_behavior = "LOG"
          + update_behavior = "LOG"
        }
    }

  # aws_glue_job.etl_job will be created
  + resource "aws_glue_job" "etl_job" {
      + arn               = (known after apply)
      + connections       = [
          + "de-c1w2-rds-connection",
        ]
      + default_arguments = {
          + "--enable-job-insights" = "true"
          + "--glue_connection"     = "de-c1w2-rds-connection"
          + "--glue_database"       = "de-c1w2-analytics-db"
          + "--job-language"        = "python"
          + "--target_path"         = "s3://de-c1w2-730335457346-us-east-1-datalake/gold"
        }
      + glue_version      = "4.0"
      + id                = (known after apply)
      + max_capacity      = (known after apply)
      + name              = "de-c1w2-etl-job"
      + number_of_workers = 2
      + role_arn          = (known after apply)
      + tags_all          = (known after apply)
      + timeout           = 5
      + worker_type       = "G.1X"

      + command {
          + name            = "glueetl"
          + python_version  = "3"
          + runtime         = (known after apply)
          + script_location = "s3://de-c1w2-730335457346-us-east-1-scripts/glue_job.py"
        }

      + execution_property (known after apply)

      + notification_property (known after apply)
    }

  # aws_iam_role.glue_role will be created
  + resource "aws_iam_role" "glue_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "glue.amazonaws.com"
                        }
                      + Sid       = "AllowGlueToAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "de-c1w2-glue-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy.task_role_policy will be created
  + resource "aws_iam_role_policy" "task_role_policy" {
      + id          = (known after apply)
      + name        = "de-c1w2-glue-role-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "sqs:*",
                          + "s3:*",
                          + "rds:*",
                          + "logs:*",
                          + "iam:*",
                          + "glue:*",
                          + "ec2:*",
                          + "cloudwatch:*",
                          + "cloudtrail:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowGlueAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.


data.aws_security_group.db_sg: Reading...
data.aws_caller_identity.current: Reading...
data.aws_subnet.public_a: Reading...
data.aws_iam_policy_document.glue_base_policy: Reading...
data.aws_vpc.main: Reading...
data.aws_iam_policy_document.glue_access_policy: Reading...
data.aws_iam_policy_document.glue_base_policy: Read complete after 0s [id=3940084333]
data.aws_iam_policy_document.glue_access_policy: Read complete after 0s [id=2526717434]
data.aws_caller_identity.current: Read complete after 0s [id=730335457346]
data.aws_security_group.db_sg: Read complete after 0s [id=sg-04b9a2a21fd452b17]
data.aws_subnet.public_a: Read complete after 0s [id=subnet-0c94c28e50220eac3]
data.aws_vpc.main: Read complete after 1s [id=vpc-06822aca78995ca9c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_glue_catalog_database.analytics_database will be created
  + resource "aws_glue_catalog_database" "analytics_database" {
      + arn          = (known after apply)
      + catalog_id   = (known after apply)
      + description  = "Database for performing analytics on OLTP data"
      + id           = (known after apply)
      + location_uri = (known after apply)
      + name         = "de-c1w2-analytics-db"
      + tags_all     = (known after apply)

      + create_table_default_permission (known after apply)
    }

  # aws_glue_connection.rds_connection will be created
  + resource "aws_glue_connection" "rds_connection" {
      + arn                   = (known after apply)
      + catalog_id            = (known after apply)
      + connection_properties = (sensitive value)
      + connection_type       = "JDBC"
      + id                    = (known after apply)
      + name                  = "de-c1w2-rds-connection"
      + tags_all              = (known after apply)

      + physical_connection_requirements {
          + availability_zone      = "us-east-1a"
          + security_group_id_list = [
              + "sg-04b9a2a21fd452b17",
            ]
          + subnet_id              = "subnet-0c94c28e50220eac3"
        }
    }

  # aws_glue_crawler.s3_crawler will be created
  + resource "aws_glue_crawler" "s3_crawler" {
      + arn           = (known after apply)
      + database_name = "de-c1w2-analytics-db"
      + id            = (known after apply)
      + name          = "de-c1w2-analytics-db-crawler"
      + role          = (known after apply)
      + tags_all      = (known after apply)

      + recrawl_policy {
          + recrawl_behavior = "CRAWL_NEW_FOLDERS_ONLY"
        }

      + s3_target {
          + path = "s3://de-c1w2-730335457346-us-east-1-datalake/gold"
        }

      + schema_change_policy {
          + delete_behavior = "LOG"
          + update_behavior = "LOG"
        }
    }

  # aws_glue_job.etl_job will be created
  + resource "aws_glue_job" "etl_job" {
      + arn               = (known after apply)
      + connections       = [
          + "de-c1w2-rds-connection",
        ]
      + default_arguments = {
          + "--enable-job-insights" = "true"
          + "--glue_connection"     = "de-c1w2-rds-connection"
          + "--glue_database"       = "de-c1w2-analytics-db"
          + "--job-language"        = "python"
          + "--target_path"         = "s3://de-c1w2-730335457346-us-east-1-datalake/gold"
        }
      + glue_version      = "4.0"
      + id                = (known after apply)
      + max_capacity      = (known after apply)
      + name              = "de-c1w2-etl-job"
      + number_of_workers = 2
      + role_arn          = (known after apply)
      + tags_all          = (known after apply)
      + timeout           = 5
      + worker_type       = "G.1X"

      + command {
          + name            = "glueetl"
          + python_version  = "3"
          + runtime         = (known after apply)
          + script_location = "s3://de-c1w2-730335457346-us-east-1-scripts/glue_job.py"
        }

      + execution_property (known after apply)

      + notification_property (known after apply)
    }

  # aws_iam_role.glue_role will be created
  + resource "aws_iam_role" "glue_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "glue.amazonaws.com"
                        }
                      + Sid       = "AllowGlueToAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "de-c1w2-glue-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy.task_role_policy will be created
  + resource "aws_iam_role_policy" "task_role_policy" {
      + id          = (known after apply)
      + name        = "de-c1w2-glue-role-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "sqs:*",
                          + "s3:*",
                          + "rds:*",
                          + "logs:*",
                          + "iam:*",
                          + "glue:*",
                          + "ec2:*",
                          + "cloudwatch:*",
                          + "cloudtrail:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowGlueAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_glue_connection.rds_connection: Creating...
aws_glue_catalog_database.analytics_database: Creating...
aws_iam_role.glue_role: Creating...
aws_iam_role.glue_role: Creation complete after 1s [id=de-c1w2-glue-role]
aws_iam_role_policy.task_role_policy: Creating...
aws_iam_role_policy.task_role_policy: Creation complete after 0s [id=de-c1w2-glue-role:de-c1w2-glue-role-policy]
aws_glue_connection.rds_connection: Creation complete after 1s [id=730335457346:de-c1w2-rds-connection]
aws_glue_catalog_database.analytics_database: Creation complete after 1s [id=730335457346:de-c1w2-analytics-db]
aws_glue_job.etl_job: Creating...
aws_glue_crawler.s3_crawler: Creating...
aws_glue_job.etl_job: Creation complete after 0s [id=de-c1w2-etl-job]
aws_glue_crawler.s3_crawler: Creation complete after 8s [id=de-c1w2-analytics-db-crawler]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

aws glue start-job-run --job-name de-c1w2-etl-job

jr_92f6f71032a4d3c0590f58443395ded25c237fe5208a357c2489f42898a556c2

aws glue get-job-run --job-name de-c1w2-etl-job --run-id jr_92f6f71032a4d3c0590f58443395ded25c237fe5208a357c2489f42898a556c2 --output text --query "JobRun.JobRunState"

RUNNING
